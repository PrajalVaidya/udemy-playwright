
if id is present
css -> tagname#id or #id

if class attribute is present
css -> tagname.class or .class

if attribute is present
css -> tagname[attribute='value'] or [attribute='value']

write css with traversing from parent to child
css -> parenttagname >> childtagname

if needs to write the locator based on text



--NOTES on using getByLabel Selector --
-- getByLabel works in following cases only.

CASE I : When referenceId is present
<label for="referenceId" > THIS IS LABEL</label>
<input id="referenceId" > This is a input field </input>

CASE II : When other elements are wrapped inside the <label> tag
<label for="referenceId" > THIS IS LABEL
<input id="referenceId" > This is a input field </input>
</label>

--- NOTES on handling JS pop ups and dialogs ---

-- page.on('dialogs',dialogs=>dialogs.dismiss());
    page.on('dialogs',dialogs=>dialogs.accpet());



--- Working with iframes ----
 const secandframe = await page.frameLocator("iframe[src*='calendar']");
  await secandframe.getByRole("button", { name: "Next" }).click();


-- using routes methods to intercept and modify request and response ---

//basically how this function works is ,whenever it encounter the given url in the page.route(""),
it routes the response from the url as given insde the route function.

also when it encounters the url in request case , it sends the modified request payload as well.

  await page.route(
    "https://rahulshettyacademy.com/api/ecom/order/get-orders-for-customer/*",
    async (route) => {
      const response = await page.request.fetch(route.request());
      let body = JSON.stringify(fakePayLoadOrders);
      route.fulfill({
        response,
        body,
      });
      //intercepting response -APi response-> { playwright fakeresponse}->browser->render data on front end
    }
  );


  await page.locator("button[routerlink*='myorders']").click();
  await page.waitForResponse(
    "https://rahulshettyacademy.com/api/ecom/order/get-orders-for-customer/*"
  );


  -- For running test with multiple test datas
    Method 1:
      iterate a test over a testData.json file using

      for(const data for dataset){
        test("test case I",()=>{
          ...steps1
          ...stesp2
          ..
          ..
        })
      } 



      Method 2:

      use test fixtures 



      -- running test in same file in parallel and serial
      test.describe.configure({mode:"parallel"})
      or
      test.describe.configure({mode:"serial"})
